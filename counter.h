
#ifndef __COUNTER_H
#define __COUNTER_H

#include <stdint.h>

#define LED_ALL_PORTA 0b00101111
#define LED_ALL_PORTB 0b00001111
#define LED_ALL_PORTC 0b00111111

#define LED_MSD_PORTA_TOP 0b00100000 // PORTA
#define LED_MSD_PORTA_MID 0b00000100 // PORTA
#define LED_MSD_PORTA_BOT 0b00001000 // PORTA
#define LED_MSD_PORTA_TL  0b00000010 // PORTA
#define LED_MSD_PORTC_TR  0b00000010 // PORTC
#define LED_MSD_PORTA_BL  0b00000001 // PORTA
#define LED_MSD_PORTC_BR  0b00000001 // PORTC

#define LED_LSD_PORTB_TOP 0b00000001 // PORTB
#define LED_LSD_PORTC_MID 0b00010000 // PORTC
#define LED_LSD_PORTC_BOT 0b00100000 // PORTC
#define LED_LSD_PORTC_TL  0b00001000 // PORTC
#define LED_LSD_PORTB_TR  0b00000100 // PORTB
#define LED_LSD_PORTC_BL  0b00000100 // PORTC
#define LED_LSD_PORTB_BR  0b00000010 // PORTB

#define LED_PORTB_TICK    0b00001000

static const uint8_t MSD_PORTA[] = {
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_BOT | LED_MSD_PORTA_TL | LED_MSD_PORTA_BL,
    0,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_MID | LED_MSD_PORTA_BL | LED_MSD_PORTA_BOT,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_MID | LED_MSD_PORTA_BOT,
    LED_MSD_PORTA_TL | LED_MSD_PORTA_MID,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_TL | LED_MSD_PORTA_MID | LED_MSD_PORTA_BOT,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_TL | LED_MSD_PORTA_MID | LED_MSD_PORTA_BL | LED_MSD_PORTA_BOT,
    LED_MSD_PORTA_TOP,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_MID | LED_MSD_PORTA_BOT | LED_MSD_PORTA_TL | LED_MSD_PORTA_BL,
    LED_MSD_PORTA_TOP | LED_MSD_PORTA_MID | LED_MSD_PORTA_TL
};

static const uint8_t MSD_PORTC[] = {
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_BR,
    LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR,
    LED_MSD_PORTC_TR | LED_MSD_PORTC_BR
};

static const uint8_t LSD_PORTB[] = {
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR | LED_LSD_PORTB_BR,
    LED_LSD_PORTB_TOP | LED_LSD_PORTB_TR | LED_LSD_PORTB_BR
};

static const uint8_t LSD_PORTC[] = {
    LED_LSD_PORTC_TL | LED_LSD_PORTC_BL | LED_LSD_PORTC_BOT,
    0,
    LED_LSD_PORTC_MID | LED_LSD_PORTC_BL | LED_LSD_PORTC_BOT,
    LED_LSD_PORTC_MID | LED_LSD_PORTC_BOT,
    LED_LSD_PORTC_TL | LED_LSD_PORTC_MID,
    LED_LSD_PORTC_TL | LED_LSD_PORTC_MID | LED_LSD_PORTC_BOT,
    LED_LSD_PORTC_TL | LED_LSD_PORTC_MID | LED_LSD_PORTC_BL | LED_LSD_PORTC_BOT,
    0,
    LED_LSD_PORTC_TL | LED_LSD_PORTC_MID | LED_LSD_PORTC_BL | LED_LSD_PORTC_BOT,
    LED_LSD_PORTC_TL | LED_LSD_PORTC_MID
};

typedef enum {
    SEGMENT_FIRST,      /**< Display the most sigificant value */
    SEGMENT_MIDDLE,     /**< Display the middle value */
    SEGMENT_LAST        /**< Display the least significant value */
} SEGMENT;

/** Which segment to display */
extern SEGMENT seg;

/** Set digit LEDs according to value stored in next_to_display */
extern void display(void);

/** Decrement value in segments and update next_to_display */
extern void decrement(void);

/** Write digit num to LEDs
 * \param num number to display
 */
extern void displayNum(uint8_t num);

#endif
